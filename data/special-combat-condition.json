{
  "meta": {
    "title": "Saga Edition \u2014 Special Combat Conditions (mechanical)",
    "source": "Combat_Skills_Summary_v3.pdf (extracted) + derivations",
    "purpose": "Attachable conditions that modify attack/defense math at resolution time. Each entry includes triggers, concrete modifiers, removal methods, and rollable checks where applicable."
  },
  "conditions": [
    {
      "id": "concealment",
      "name": "Concealment",
      "summary": "Target has concealment vs attacker (fog, smoke, light cover that grants concealment).",
      "trigger": "applies when attacker makes an attack roll vs concealed target",
      "duration": "until concealment source removed or effect ends",
      "stacking": "does not stack with other concealment sources",
      "effects": {
        "attacker_attack_modifier": -2,
        "defender_reflex_modifier": 0,
        "hit_resolution_rule": "After attack roll, if attacker misses due to concealment, treat as normal. Perception penalties applied to spotting checks."
      },
      "removal": {
        "auto": "source removed or target revealed",
        "checkable": [
          {
            "check": "Perception",
            "actor": "attacker or allies",
            "roll": "1d20 + Perception_mod",
            "dc_formula": "base_dc = 10 + concealment_complexity; GM sets concealment_complexity",
            "success_effect": "remove concealment for that attacker for next attack"
          }
        ]
      },
      "notes": "Implement as flat -2 modifier to attack roll prior to calculating hit; when attacking area attacks refer to total concealment rules."
    },
    {
      "id": "total_concealment",
      "name": "Total Concealment",
      "summary": "Target cannot be seen; attacker may attack a square at -5 to hit but cannot target the creature directly.",
      "trigger": "attack roll vs a square suspected to hold creature",
      "duration": "until LOS regained or effect ends",
      "stacking": "exclusive with concealment",
      "effects": {
        "attacker_attack_modifier": -5,
        "defender_reflex_modifier": 0,
        "targeting": "attacker selects square; hit on miss rules apply (no partial hits)",
        "hit_resolution_rule": "If attack hits square, resolve against Ref as normal; if miss, no effect"
      },
      "removal": {
        "auto": "illumination or detection",
        "checkable": [
          {
            "check": "Perception (see total concealment penalty)",
            "actor": "attacker",
            "roll": "1d20 + Perception_mod - 10",
            "success_effect": "attacker can target creature directly (treat as reveal)"
          }
        ]
      }
    },
    {
      "id": "cover",
      "name": "Cover (+5)",
      "summary": "Defender has cover that grants +5 to Reflex (ignoreable by Aim).",
      "trigger": "applies to defense calculation when attack made and cover geometry qualifies",
      "duration": "while cover remains",
      "stacking": "cover sources do not stack; choose best",
      "effects": {
        "defender_reflex_modifier": 5,
        "attacker_attack_modifier": 0,
        "interaction_with_aim": "Aim removes cover bonus to defender Ref for that attack only"
      },
      "removal": {
        "auto": "target leaves cover or Aim used by attacker"
      },
      "notes": "Code path: when computing effective defender Ref = baseRef + cover.defender_reflex_modifier."
    },
    {
      "id": "improved_cover",
      "name": "Improved Cover (+10)",
      "summary": "Defender has improved cover (apertures, corners), grants +10 to Reflex.",
      "trigger": "applies when geometry provides improved cover",
      "duration": "until cover removed",
      "effects": {
        "defender_reflex_modifier": 10,
        "interaction_with_aim": "Aim removes improved cover as well but attacker still needs LOS adjustments"
      },
      "removal": {
        "auto": "Aim or move out of cover"
      }
    },
    {
      "id": "flanking",
      "name": "Flanking +2",
      "summary": "Attacker gains +2 to attack when an ally is on the opposite side of the target.",
      "trigger": "melee attack resolution when flanking condition true",
      "duration": "until one flanker moves or condition changes",
      "effects": {
        "attacker_attack_modifier": 2,
        "requires_melee": true,
        "stacking": "multiple flanking sources do not stack"
      },
      "notes": "Compute attack = d20 + attack_modifiers + 2 if flanking flag true."
    },
    {
      "id": "aiming",
      "name": "Aiming (Ignore Cover)",
      "summary": "Attacker spent 2 consecutive swift actions to ignore target's cover bonus to Reflex on next attack.",
      "trigger": "applies to next attack made by aiming actor provided LOS maintained",
      "duration": "one attack or until LOS lost or action taken",
      "effects": {
        "attacker_attack_modifier": 0,
        "removes_defender_cover": true,
        "interaction": "cannot apply to area attacks; provokes AoO when starting aim"
      },
      "validation": {
        "prereq": "actor must have performed two consecutive swift actions flagged as AIM",
        "los_check": "boolean: maintain line of sight to target at time of attack"
      }
    },
    {
      "id": "suppressive_fire",
      "name": "Suppressive Fire",
      "summary": "Attacker uses attack vs Ref 10 to impose -2 on target's next attack (suppression).",
      "trigger": "successful suppression attack",
      "duration": "applies to target's next attack",
      "effects": {
        "target_attack_modifier": -2,
        "resolution_roll": "attack_roll_vs_reflex(10) as a special action"
      },
      "rollable": {
        "suppress_attempt": {
          "label": "Suppress attempt (attack vs Ref 10)",
          "roll": "1d20 + attacker_attack_mod",
          "success_threshold": 10,
          "on_success": "apply target_attack_modifier -2 to target's next attack"
        }
      }
    },
    {
      "id": "braced_autofire",
      "name": "Braced Autofire",
      "summary": "Weapon in brace reduces autofire penalty from -5 to -2 at cost of using 2 swift actions to brace (heavy weapons only).",
      "trigger": "autofire attack with braced flag",
      "duration": "one autofire attack unless brace maintained",
      "effects": {
        "attacker_attack_modifier": -2,
        "autofire_shots_consumed": 10,
        "notes": "Requires weapon capable of bracing; bracing itself consumes 2 swift actions"
      }
    },
    {
      "id": "burst_fire_mode",
      "name": "Burst Fire",
      "summary": "Weapon set to burst fire: -5 to attack; +2 dice to damage; consumes specified shots.",
      "trigger": "applies to attack resolution when in burst mode",
      "duration": "that attack",
      "effects": {
        "attacker_attack_modifier": -5,
        "damage_change": {
          "type": "dice_bonus",
          "bonus_dice": 2,
          "interpretation": "add two instances of weapon damage die or as GM defines"
        },
        "ammo_consumption": "weapon_defined"
      }
    },
    {
      "id": "autofire_vs_creature",
      "name": "Autofire targeted at creature (-5)",
      "summary": "Autofire used against single creature: -5 attack; uses 5 shots; not treated as area attack for hit rules.",
      "trigger": "attack resolution with autofire-targeted flag",
      "duration": "one attack",
      "effects": {
        "attacker_attack_modifier": -5,
        "damage_roll": "compute base damage but treat attack as single-target autofire resolution"
      }
    },
    {
      "id": "suppressive_cover_interaction",
      "name": "Suppression-Cover Interaction",
      "summary": "Targets under heavy cover ignore suppression if cover blocks line between suppressing shooter and target's center; otherwise suppression applies.",
      "trigger": "when suppression attempt is resolved",
      "effects": {
        "cover_block_check": "line_from_attacker_to_target_center intersects cover_cell ? suppression_ignored : suppression_applied",
        "suppression_penalty_if_applied": -2
      }
    },
    {
      "id": "ranged_into_melee_penalty",
      "name": "Ranged Into Melee",
      "summary": "Attacker suffers -5 to ranged attack when target is adjacent to an ally (unless Precise Shot).",
      "trigger": "ranged attack resolution with target adjacent to friendly unit",
      "duration": "single attack",
      "effects": {
        "attacker_attack_modifier": -5,
        "exception_feature": "Precise Shot feat removes this penalty"
      }
    },
    {
      "id": "shooting_through_aperture_penalty",
      "name": "Shooting Through Aperture",
      "summary": "Attacking through narrow slit or aperture may impose ranged attack penalty depending on weapon type and aperture width.",
      "trigger": "attack line-of-fire passes through aperture",
      "duration": "one attack",
      "effects": {
        "attacker_attack_modifier_formula": "base_penalty = aperture_width_penalty(weapon_size); example: pistol -0, rifle -5",
        "interaction_with_cover": "counts as cover for defender if line touches aperture edges"
      }
    },
    {
      "id": "aim_vs_cover_resolution",
      "name": "Aim vs Cover Resolution",
      "summary": "If attacker has AIM condition and LOS maintained, remove defender cover bonus when computing hit; numerical implementation below.",
      "trigger": "attack resolution and aim.flag == true",
      "duration": "one attack",
      "effects": {
        "defender_reflex_effective": "defender.base_reflex + defender.other_mods + cover_bonus - (aim_flag ? cover_bonus : 0)",
        "example": "If defender.baseReflex=15, cover_bonus=5, aim removes +5 so effectiveReflex=15"
      }
    },
    {
      "id": "suppression_field",
      "name": "Suppression Field (area effect)",
      "summary": "Area effect imposes -2 to attacks for creatures inside area while effect active; each activation requires attack vs Ref 10 to maintain for targets.",
      "trigger": "attack resolution for any actor affected by suppression field",
      "duration": "area duration set by effect",
      "effects": {
        "attacker_attack_modifier_when_suppressed": -2,
        "application_rule": "apply penalty only while target remains in area and not behind total cover"
      }
    },
    {
      "id": "entangling_area",
      "name": "Entangling Area",
      "summary": "Area that imposes entangled condition on initial fail or movement through; entangled: -2 attack and -2 Ref, half speed.",
      "trigger": "entering or starting turn in area",
      "duration": "until escape via Strength/Acrobatics or leaving area",
      "effects": {
        "on_enter_roll": {
          "label": "Escape/avoid entanglement",
          "roll": "1d20 + Acrobatics_mod or Strength_mod (player chooses)",
          "dc": 15,
          "on_fail": "apply entangled",
          "on_success": "no entangled"
        },
        "entangled_effects": {
          "movement_multiplier": 0.5,
          "attack_modifier": -2,
          "reflex_modifier": -2
        }
      }
    },
    {
      "id": "suppressed_reaction_block",
      "name": "Suppressed Reaction Block",
      "summary": "A suppressed actor takes a -2 penalty and cannot use certain reactions (GM-defined) while suppression holds.",
      "trigger": "when actor is under suppression effect",
      "duration": "until suppression removed",
      "effects": {
        "reaction_block_list": [
          "some reactions (GM decides)"
        ],
        "attack_modifier": -2
      }
    },
    {
      "id": "flat_footed_attack_window",
      "name": "Flat-footed (surprise) window",
      "summary": "Targets who are flat-footed lose Dexterity and Dodge bonuses to Reflex; attacks vs flat-footed target calculate Ref without Dex or dodge.",
      "trigger": "start of combat before target acts or after successful Feint",
      "duration": "until target's first turn or effect ends",
      "effects": {
        "defender_reflex_modifier": "subtract Dex_bonus + Dodge_bonuses",
        "interaction_with_feint": "Feint sets flat-footed for the first attack by the feinter next round"
      }
    },
    {
      "id": "feint_flatfoot",
      "name": "Feint (makes target flat-footed vs next attack)",
      "summary": "Resolution: Deception vs target Initiative. On success target loses Dex bonus to Ref for the feinter's first attack next round.",
      "trigger": "successful Feint check",
      "duration": "one attack window",
      "effects": {
        "resolve": {
          "roll": "1d20 + Deception_mod",
          "opp_roll": "1d20 + target_initiative_mod",
          "on_success": "apply flat-footed to target only vs feinter's next attack"
        }
      }
    },
    {
      "id": "aim_vs_total_cover_exception",
      "name": "Aim cannot target through total cover",
      "summary": "Aim removes cover but does not grant ability to attack through total cover; LOS rules still apply.",
      "trigger": "AIM attempt when target has total cover",
      "effects": {
        "validation": "if total_cover==true then aim_has_no_effect_on_targeting; attacker may spend aim but must still have LOS"
      }
    },
    {
      "id": "braced_vs_autofire_buff",
      "name": "Braced Autofire Attack Math",
      "summary": "When braced and making autofire: attack penalty = -2 instead of -5. Damage still resolves per autofire/burst rules.",
      "trigger": "autofire attack and braced flag true",
      "effects": {
        "attacker_attack_modifier": -2,
        "ammo_used": 10,
        "damage_resolution": "calculate autoconsistent with autofire rules; braced reduces aim failure chance in sustained bursts (GM)"
      }
    }
  ]
}
